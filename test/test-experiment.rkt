#lang typed/racket
(require typed-worklist
         typed/rackunit)

(let ()
  (define result
    (worklist (list (list 7)
                    (list))
              [(λ ([x : Integer])
                 (list (number->string x)
                       (list (if (> x 0) (sub1 x) 0))
                       (list (string->symbol
                              (string-append "v" (number->string x))))))
               (λ ([x : Symbol])
                 (list (eq? 'v5 x)
                       (list 10)
                       (list 'xyz)))]
              (Integer String)
              (Symbol Boolean)))
  (ann result (List (HashTable Symbol Boolean) (HashTable Integer String)))
  (check-equal?
   result
   '(#hash((v0 . #f)
           (v1 . #f)
           (v2 . #f)
           (v3 . #f)
           (v4 . #f)
           (v5 . #t)
           (v6 . #f)
           (v7 . #f)
           (v8 . #f)
           (v9 . #f)
           (v10 . #f)
           (xyz . #f))
     #hash((0 . "0")
           (1 . "1")
           (2 . "2")
           (3 . "3")
           (4 . "4")
           (5 . "5")
           (6 . "6")
           (7 . "7")
           (8 . "8")
           (9 . "9")
           (10 . "10")))))